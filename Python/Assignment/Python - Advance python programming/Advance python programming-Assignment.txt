										Advance python programming
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1> What is File function in python? What is keywords to create and write file. 

ANS:- 

==> file = open("filename.txt", "mode")
==> file.write("Hello, World!")
==> file.close()
==> with open("filename.txt", "w") as file:
    file.write("Hello, World!")
==> with open("example.txt", "w") as file:
    file.write("This is an example file.\n")
    file.write("Python is awesome!\n")
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2> Write a Python program to read an entire text file.

ANS:-

file_name = "example.txt"  # Replace with your file's name

try:
    
    with open(file_name, "r") as file:
        
        file_contents = file.read()
        
        
        print("Contents of the file:")
        print(file_contents)
except FileNotFoundError:
    print(f"File '{file_name}' not found.")
except Exception as e:
    print(f"An error occurred: {str(e)}")
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3> Write a Python program to append text to a file and display the text.

ANS:- 


file_name = "example.txt"  # Replace with your file's name

try:
    
    with open(file_name, "a") as file:
        
        text_to_append = input("Enter text to append to the file: ")
        
        
        file.write(text_to_append + "\n")
        
        
        file.close()

    
    with open(file_name, "r") as file:
        updated_contents = file.read()
        print("Updated contents of the file:")
        print(updated_contents)
except FileNotFoundError:
    print(f"File '{file_name}' not found.")
except Exception as e:
    print(f"An error occurred: {str(e)}")
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4> Write a Python program to read first n lines of a file. 

ANS:- 


file_name = "example.txt"  # Replace with your file's name


n = 5  # Change this to the desired number of lines

try:
    
    with open(file_name, "r") as file:
        
        lines = []
        for i in range(n):
            line = file.readline()
            if not line:
                break  
            lines.append(line)
        
        
        for line in lines:
            print(line.strip())  

except FileNotFoundError:
    print(f"File '{file_name}' not found.")
except Exception as e:
    print(f"An error occurred: {str(e)}")

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5> Write a Python program to read last n lines of a file.

ANS:- 


file_name = "example.txt"  # Replace with your file's name


n = 5  

try:
    
    with open(file_name, "r") as file:
        
        lines = file.readlines()
        
        
        last_n_lines = lines[-n:]
        
        
        for line in last_n_lines:
            print(line.strip())  

except FileNotFoundError:
    print(f"File '{file_name}' not found.")
except Exception as e:
    print(f"An error occurred: {str(e)}")

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6> Write a Python program to read a file line by line and store it into a list

ANS:-


file_name = "example.txt"  # Replace with your file's name

try:
    
    with open(file_name, "r") as file:
        
        lines_list = []
        
        
        for line in file:
            lines_list.append(line.strip())  

except FileNotFoundError:
    print(f"File '{file_name}' not found.")
except Exception as e:
    print(f"An error occurred: {str(e)}")


for line in lines_list:
    print(line)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7> Write a Python program to read a file line by line store it into a variable.

ANS:-


file_name = "example.txt"  

try:
    
    with open(file_name, "r") as file:
        
        file_contents = ""
        
        
        for line in file:
            file_contents += line  

except FileNotFoundError:
    print(f"File '{file_name}' not found.")
except Exception as e:
    print(f"An error occurred: {str(e)}")


print("File Contents:")
print(file_contents)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8> Write a python program to find the longest words.

ANS:-


def find_longest_words(text):
    
    words = text.split()
    
    longest_words = []
    max_length = 0
    
    
    for word in words:
        
        cleaned_word = word.strip('.,!?()[]{}"\'')
        word_length = len(cleaned_word)
        
        
        if word_length > max_length:
            longest_words = [cleaned_word]
            max_length = word_length
        elif word_length == max_length:
            longest_words.append(cleaned_word)
    
    return longest_words

text = "This is a sample sentence with some long words like elephant, hippopotamus, and crocodile."

result = find_longest_words(text)

if result:
    print("Longest word(s):")
    for word in result:
        print(word)
else:
    print("No words found in the text.")


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9> Write a Python program to count the number of lines in a text file.

ANS:-

file_name = "example.txt"  # Replace with your file's name

try:
    
    with open(file_name, "r") as file:
        
        lines = file.readlines()
        
        
        line_count = len(lines)

    
    print(f"Number of lines in '{file_name}': {line_count}")
except FileNotFoundError:
    print(f"File '{file_name}' not found.")
except Exception as e:
    print(f"An error occurred: {str(e)}")

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10> Write a Python program to count the frequency of words in a file.

ANS:-

file_name = "example.txt"  # Replace with your file's name

try:
    
    with open(file_name, "r") as file:
        
        word_freq = {}
        
        
        for line in file:
            
            words = line.split()
            
            
            for word in words:
                
                cleaned_word = word.strip('.,!?()[]{}"\'').lower()
                
                if cleaned_word:
                    word_freq[cleaned_word] = word_freq.get(cleaned_word, 0) + 1

    print("Word frequencies:")
    for word, freq in word_freq.items():
        print(f"{word}: {freq}")
except FileNotFoundError:
    print(f"File '{file_name}' not found.")
except Exception as e:
    print(f"An error occurred: {str(e)}")

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11> Write a Python program to write a list to a file.

ANS:-

file_name = "output.txt"  


my_list = ["apple", "banana", "cherry", "date", "fig"]

try:
    
    with open(file_name, "w") as file:
        
        for item in my_list:
            file.write(item + "\n")  
except Exception as e:
    print(f"An error occurred: {str(e)}")

========================================================================

file_name = "output.txt" 


my_list = ["grape", "kiwi", "lemon", "orange"]

try:
    
    with open(file_name, "a") as file:
        
        for item in my_list:
            file.write(item + "\n")  
except Exception as e:
    print(f"An error occurred: {str(e)}")
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

12> Write a Python program to copy the contents of a file to another file.

ANs:- 

source_file_name = "source.txt"  # Replace with your source file's name
destination_file_name = "destination.txt"  # Replace with your destination file's name

try:
    
    with open(source_file_name, "r") as source_file:
        
        file_contents = source_file.read()
    
    
    with open(destination_file_name, "w") as destination_file:
        
        destination_file.write(file_contents)
    
    print(f"Contents of '{source_file_name}' copied to '{destination_file_name}' successfully.")
except FileNotFoundError:
    print(f"One or both files not found.")
except Exception as e:
    print(f"An error occurred: {str(e)}")
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13> Explain Exception handling? What is an Error in Python?

ANS:-


1> Error Occurs: When an error or exceptional condition occurs during program execution, Python raises an exception. These errors can be due to a variety of reasons, such as trying to     access a non-existent file, dividing by zero, or calling a method on an object that doesn't support that method.

2> Exception Object: When an error occurs, Python creates an exception object. This object contains information about the type of error that occurred and the location in the code where the error occurred.

3> Exception Handling: To handle exceptions, you can use try and except blocks. The code that might raise an exception is placed within the try block. If an exception is raised within the try block, the program jumps to the corresponding except block, where you can specify how to handle the exception. If no exception is raised, the except block is skipped.

try:
    
    result = 10 / 0  # This will raise a ZeroDivisionError
except ZeroDivisionError as e:
    
    print("An error occurred:", e)

4> Handling Multiple Exceptions: You can have multiple except blocks to handle different types of exceptions.

try:
    
    result = int("abc")
except ZeroDivisionError:
    print("Division by zero error")
except ValueError:
    print("Invalid value error")

5> Finally Block: You can use a finally block to specify code that should always be executed, whether an exception is raised or not. This block is often used for cleanup tasks, like closing files or network connections.

try:
    
    file = open("example.txt", "r")
    data = file.read()
except FileNotFoundError:
    print("File not found")
finally:
   
    file.close()
6> Custom Exceptions: You can also define your own custom exceptions by creating new exception classes that inherit from the built-in Exception class.Custom Exceptions: You can also define your own custom exceptions by creating new exception classes that inherit from the built-in Exception class.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
14> How many except statements can a try-except block have? Name Some built-in exception classes:

ANS:-

A try-except block in Python can have multiple except statements to handle different types of exceptions. You can handle as many exceptions as needed in a single try block. Each except block can handle a specific type of exception, allowing you to customize error handling for different situations.

try:

    result = int("abc")
except ValueError:
    print("Invalid value error")
except ZeroDivisionError:
    print("Division by zero error")
except FileNotFoundError:
    print("File not found error")

==<1>  SyntaxError: Raised when there is a syntax error in your code.
==<2>  IndentationError: A subtype of SyntaxError, raised when there are indentation errors.
==<3>  NameError: Raised when a local or global name is not found.
==<4>  TypeError: Raised when an operation or function is applied to an object of inappropriate type.
==<5>  ValueError: Raised when an operation or function receives an argument of the correct type but an inappropriate value.
==<6>  ZeroDivisionError: Raised when division or modulo by zero is attempted.
==<7>  FileNotFoundError: Raised when an attempt to open a file fails because the file does not exist.
==<8>  IOError: Raised when an I/O operation (e.g., reading or writing a file) fails.
==<9>  IndexError: Raised when trying to access an element at an invalid index in a sequence (e.g., list, tuple).
==<10> KeyError: Raised when trying to access a dictionary key that does not exist.
==<11> AttributeError: Raised when trying to access an attribute or method that does not exist.
==<12> ImportError: Raised when an import statement fails to import a module.
==<13> OverflowError and MemoryError: Raised for various numeric and memory-related errors.
==<14> RuntimeError: A generic error class often used for custom exceptions.
==<15> Exception: The base class for all exceptions in Python. You can catch this to handle any exception.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

15> When will the else part of try-except-else be executed?

ANS:- 

try:
    
except ExceptionType:
    
else:
    
try:
    x = 10 / 2
except ZeroDivisionError:
    print("Division by zero error")
else:
    print("Division was successful. Result:", x)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
16> Can one block of except statements handle multiple exception?


ANS:- 

try:
    # Code that might raise exceptions
except (ValueError, TypeError):
    # Handle both ValueError and TypeError exceptions in the same way
    print("A ValueError or TypeError occurred.")


try:
    # Code that might raise exceptions
except ValueError:
    # Handle ValueError exception
    print("A ValueError occurred.")
except TypeError:
    # Handle TypeError exception
    print("A TypeError occurred.")
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
17> When is the finally block executed?

ANS:- 

try:
    # Code that might raise exceptions
except ExceptionType:
    # Code to handle exceptions of a specific type
finally:
    # Code that will always be executed, whether an exception occurred or not


1> Resource Cleanup: Closing files, network connections, or database connections to ensure they are properly released, even if an exception occurs.Resource Cleanup: Closing files, network connections, or database connections to ensure they are properly released, even if an exception occurs.

2> Cleanup Operations: Releasing resources, releasing locks, or cleaning up temporary files.Cleanup Operations: Releasing resources, releasing locks, or cleaning up temporary files.

3> Logging and Reporting: Logging the outcome of an operation, reporting status, or sending notifications.Logging and Reporting: Logging the outcome of an operation, reporting status, or sending notifications.

try:
    # Code that might raise exceptions
    result = 10 / 2
except ZeroDivisionError:
    print("Division by zero error")
finally:
    # Cleanup code that will always execute
    print("Cleanup code executed")
try:
    # Code that might raise exceptions
    result = 10 / 2
except ZeroDivisionError:
    print("Division by zero error")
finally:
    # Cleanup code that will always execute
    print("Cleanup code executed")

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

18> What happens when „1‟== 1 is executed?

ANS:- 

1> Python evaluates the expression from left to right.
2> It compares the string "1" to the integer 1.
3> Since the types of the operands are different (string and integer), Python performs type coercion and tries to make both operands have a common type for comparison.
  

==>  In this case, Python will convert the integer 1 to a string "1" to make the types compatible for comparison.
1> After type coercion, Python compares the two strings "1" and "1".

2> The result of the comparison is True because the two strings are equal.

So, "1" == 1 will evaluate to True in Python because, after type coercion, both sides are treated as strings and compared for equality, which in this case, is True.
 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
19> How Do You Handle Exceptions With Try/Except/Finally In Python? Explain with coding snippets.

ANS:- 

Handling Exceptions with Try/Except/Finally:

try:
    # Code that might raise exceptions
    result = 10 / 0  # This will raise a ZeroDivisionError
except ZeroDivisionError:
    # Handling the ZeroDivisionError exception
    print("Division by zero error")
finally:
    # Code that always runs, e.g., cleanup code
    print("Cleanup code executed")


Handling Exceptions with Try/Except/Else/Finally:

try:
    # Code that might raise exceptions
    result = 10 / 2
except ZeroDivisionError:
    # Handling the ZeroDivisionError exception
    print("Division by zero error")
else:
    # Code that runs if no exceptions were raised
    print("No exceptions occurred")
finally:
    # Code that always runs, e.g., cleanup code
    print("Cleanup code executed")

Handling Multiple Exceptions:
 
try:
    # Code that might raise exceptions
    value = int("abc")  # This will raise a ValueError
except ValueError:
    # Handling the ValueError exception
    print("Invalid value error")
except ZeroDivisionError:
    # Handling the ZeroDivisionError exception
    print("Division by zero error")
finally:
    # Code that always runs, e.g., cleanup code
    print("Cleanup code executed")


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

20> Write python program that user to enter only odd numbers, else will raise an exception.

ANS :- 

while True:
    try:
        user_input = input("Enter an odd number: ")
        number = int(user_input)
        
        if number % 2 == 0:
            raise ValueError("Even numbers are not allowed. Please enter an odd number.")
        
        print(f"You entered an odd number: {number}")
        break  # Exit the loop if a valid odd number is entered
    except ValueError as ve:
        print(ve)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

21> What are oops concepts? Is multiple inheritance supported in java

ANS:- 

Object-Oriented Programming (OOP) concepts are fundamental principles and practices that are used to design and structure software using the object-oriented paradigm. OOP is a programming paradigm that is based on the concept of objects, which represent real-world entities and encapsulate data and behavior. Here are some key OOP concepts:

1. Class: A class is a blueprint or template for creating objects. It defines the properties (attributes) and behaviors (methods) that objects of the class will have.

2. Object: An object is an instance of a class. It represents a real-world entity with its own state (attributes) and behavior (methods).

3. Encapsulation: Encapsulation is the concept of bundling data (attributes) and methods (functions) that operate on the data into a single unit called an object. It hides the internal details of an object from the outside world and exposes only what is necessary.

4. Inheritance1: Inheritance is a mechanism that allows you to create a new class (subclass or derived class) based on an existing class (base class or parent class). The subclass inherits the properties and behaviors of the superclass. Inheritance promotes code reusability.

5. Polymorphism: Polymorphism allows objects of different classes to be treated as objects of a common superclass. It enables you to write code that can work with objects of multiple classes in a uniform way. Polymorphism is achieved through method overriding and method overloading.

6. Abstraction**: Abstraction is the process of simplifying complex systems by modeling classes based on their essential properties and behaviors, while hiding irrelevant details.

7. Method Overriding: Method overriding is a feature that allows a subclass to provide a specific implementation of a method that is already defined in its superclass. It allows a subclass to customize or extend the behavior of a superclass method.

8. Method Overloading: Method overloading allows a class to have multiple methods with the same name but different parameter lists. The appropriate method to call is determined based on the number and types of arguments passed.

9. Interface: An interface is a contract that specifies a set of methods that a class must implement. It defines a common set of methods that multiple classes can adhere to, enabling polymorphism and code reuse.

As for your second question, regarding Java, yes, Java supports single inheritance and multiple interface inheritance. In Java, a class can inherit from only one superclass (single inheritance), but it can implement multiple interfaces (multiple inheritance through interfaces). This design choice was made to avoid some of the complexities and ambiguities associated with multiple inheritance of classes, which can lead to the diamond problem and other issues.

In Java, you can create a class that implements multiple interfaces, allowing it to inherit and implement behavior from multiple sources. This allows you to achieve the benefits of code reuse and polymorphism while avoiding some of the problems associated with multiple inheritance of classes.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

22> How to Define a Class in Python? What Is Self? Give An Example Of A Python Class

ANS:- 

Step 1: Define the Class

class MyClass:
    # Class attributes (optional)
    
    def __init__(self, parameter1, parameter2):
        # Constructor method (optional)
        self.parameter1 = parameter1
        self.parameter2 = parameter2
        
    def my_method(self):
        # Instance method
        # Access instance-specific data using self
        result = self.parameter1 + self.parameter2
        return result
class MyClass:
    # Class attributes (optional)
    
    def __init__(self, parameter1, parameter2):
        # Constructor method (optional)
        self.parameter1 = parameter1
        self.parameter2 = parameter2
        
    def my_method(self):
        # Instance method
        # Access instance-specific data using self
        result = self.parameter1 + self.parameter2
        return result

Step 2: Create an Object

# Create an object of the class
obj = MyClass(10, 20)

Step 3: Access Attributes and Call Methods

# Access attributes
value1 = obj.parameter1
value2 = obj.parameter2

# Call methods
result = obj.my_method()
# Access attributes
value1 = obj.parameter1
value2 = obj.parameter2

# Call methods
result = obj.my_method()

Example of a Python Class:

class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

    def perimeter(self):
        return 2 * (self.length + self.width)

# Create a rectangle object
rect = Rectangle(5, 3)

# Access attributes and call methods
print(f"Length: {rect.length}")
print(f"Width: {rect.width}")
print(f"Area: {rect.area()}")
print(f"Perimeter: {rect.perimeter()}")

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

23> Write a Python class named Rectangle constructed by a length and width and a method which will compute the area of a rectangle

ANS:- 

class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

# Create a rectangle object
rect = Rectangle(5, 3)

# Calculate and print the area
print(f"The area of the rectangle is: {rect.area()} square units")

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

24> Write a Python class named Circle constructed by a radius and two methods which will compute the area and the perimeter of a circle

ANS:- 

import math

class Circle:
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return math.pi * self.radius ** 2

    def perimeter(self):
        return 2 * math.pi * self.radius

# Create a circle object with a radius of 5 units
circle = Circle(5)

# Calculate and print the area and perimeter
print(f"The area of the circle is: {circle.area()} square units")
print(f"The perimeter of the circle is: {circle.perimeter()} units")


==> 

The area of the circle is: 78.53981633974483 square units
The perimeter of the circle is: 31.41592653589793 units


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

25> Write a Python class named Circle constructed by a radius and two methods which will compute the area and the perimeter of a circle

ANS:- 

class Circle:
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14159265358979323846 * self.radius ** 2

    def perimeter(self):
        return 2 * 3.14159265358979323846 * self.radius

# Create a circle object with a radius of 5 units
circle = Circle(5)

# Calculate and print the area and perimeter
print(f"The area of the circle is: {circle.area()} square units")
print(f"The perimeter of the circle is: {circle.perimeter()} units")


==> 
The area of the circle is: 78.53981633974483 square units
The perimeter of the circle is: 31.41592653589793 units

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

26> Explain Inheritance in Python with an example? What is init? Or What Is A Constructor In Python?

ANS:- 

class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        pass  # Base class method, to be overridden in subclasses

class Dog(Animal):
    def speak(self):
        return f"{self.name} says Woof!"

class Cat(Animal):
    def speak(self):
        return f"{self.name} says Meow!"

# Creating objects of the subclasses
dog = Dog("Buddy")
cat = Cat("Whiskers")

# Calling the speak method of each object
print(dog.speak())  # Output: "Buddy says Woof!"
print(cat.speak())  # Output: "Whiskers says Meow!"

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

27> What is Instantiation in terms of OOP terminology?


ANS:- 

In object-oriented programming (OOP), **instantiation** refers to the process of creating an instance (an object) of a class. An instance is a specific object that is generated based on the blueprint or template provided by a class. When you instantiate a class, you are essentially creating a unique copy of that class with its own set of attributes and behaviors.

Here's a breakdown of the key concepts related to instantiation in OOP:

1. Class: A class is a blueprint or template that defines the structure and behavior of objects. It specifies the attributes (data) and methods (functions) that objects created from the class will have.

2. Instance: An instance, also known as an object, is a specific realization of a class. It is created based on the class's blueprint and has its own unique set of attributes and can perform actions defined by the class's methods.

3. Constructor: The constructor method, often named `__init__` in Python, is responsible for initializing the attributes of an object when it is created. It is called automatically when an instance is instantiated.

4. Instantiation: The process of creating an instance (object) of a class is known as instantiation. It involves allocating memory for the object, setting initial attribute values if necessary, and returning a reference to the newly created instance.

Here's a simple Python example of class instantiation:

```python
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# Instantiating two instances (objects) of the Person class
person1 = Person("Alice", 30)
person2 = Person("Bob", 25)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
28> What is used to check whether an object o is an instance of class A?

ANS:- 

isinstance(object, classinfo)


class A:
    pass

# Create an instance of class A
obj = A()

# Check if obj is an instance of class A
if isinstance(obj, A):
    print("obj is an instance of class A")
else:
    print("obj is not an instance of class A")


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
29> What relationship is appropriate for Course and Faculty?

ANs:- 

Course Table:
- CourseID (Primary Key)
- CourseName
- ...

Faculty Table:
- FacultyID (Primary Key)
- FacultyName
- ...

CourseFaculty Table (Intermediary Table):
- CourseID (Foreign Key referencing Course)
- FacultyID (Foreign Key referencing Faculty)
- StartDate
- EndDate
- ...

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

30> What relationship is appropriate for Student and Person?

ANS:- 

class Person:
    def __init__(self, first_name, last_name, age):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age

    def introduce(self):
        return f"My name is {self.first_name} {self.last_name}, and I am {self.age} years old."

class Student(Person):
    def __init__(self, first_name, last_name, age, student_id):
        super().__init__(first_name, last_name, age)
        self.student_id = student_id

    def study(self, subject):
        return f"{self.first_name} is studying {subject}."

# Creating instances
person = Person("John", "Doe", 25)
student = Student("Alice", "Smith", 20, "S12345")

# Using methods
print(person.introduce())  # Output: "My name is John Doe, and I am 25 years old."
print(student.introduce())  # Output: "My name is Alice Smith, and I am 20 years old."
print(student.study("Math"))  # Output: "Alice is studying Math."

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
											THE END
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------






































































